package com.example.projetcv.model;

import com.example.projetcv.dao.ActivityRepository;
import com.example.projetcv.dao.CVRepository;
import com.example.projetcv.dao.PersonRepository;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.dao.DataIntegrityViolationException;

import java.time.LocalDate;
import java.util.Set;
import java.util.logging.Logger;

import static org.assertj.core.api.Assertions.assertThat;
import static org.junit.jupiter.api.Assertions.*;


@SpringBootTest
public class ActivityTest {

    Logger logger = Logger.getLogger(this.getClass().getName());

    @Autowired
    private PersonRepository personRepository;

    @Autowired
    private CVRepository cvRepository;

    @Autowired
    private ActivityRepository activityRepository;

    @BeforeEach
    public void cleanPersonTable(){
        personRepository.deleteAll();
        cvRepository.deleteAll();
        activityRepository.deleteAll();
    }


    //---------------------------------CONSTRAINTS TESTS---------------------------------

    @Test
    public void idAutoGeneratedTest(){
        Person person = Person.builder()
                .name("John")
                .firstName("Doe")
                .birthday(LocalDate.now())
                .email("john.doe@example.com")
                .passwordHash("lehash")
                .build();
        personRepository.save(person);
        CV cv = CV.builder()
                .person(person)
                .build();
        cvRepository.save(cv);
        Activity activity = Activity.builder()
                .cv(cv)
                .year(2022)
                .nature(Nature.PROJECT)
                .title("Project Title")
                .build();
        Activity savedActivity = activityRepository.save(activity);
        assertThat(savedActivity.getId()).isNotNull();
    }


    @Test
    public void cvNotNullableTest(){
        assertDoesNotThrow(()->{
            Person person = Person.builder()
                    .name("John")
                    .firstName("Doe")
                    .birthday(LocalDate.now())
                    .email("john.doe@example.com")
                    .passwordHash("lehash")
                    .build();
            personRepository.save(person);
            CV cv = CV.builder()
                    .person(person)
                    .build();
            cvRepository.save(cv);
            Activity activity = Activity.builder()
                    .cv(cv)
                    .year(2022)
                    .nature(Nature.PROJECT)
                    .title("Project Title")
                    .build();
            Activity savedActivity = activityRepository.save(activity);
        });
        Exception e = assertThrows(DataIntegrityViolationException.class, ()->{
            Activity activity = Activity.builder()
                    .year(2022)
                    .nature(Nature.PROJECT)
                    .title("Project Title")
                    .build();
            Activity savedActivity = activityRepository.save(activity);
        });
        assertTrue(e.getMessage().contains("NOT NULL check constraint") && e.getMessage().contains("ACTIVITY column: CV_ID"));
    }


    @Test
    public void yearNullableTest(){
        assertDoesNotThrow(()->{
            Person person = Person.builder()
                    .name("John")
                    .firstName("Doe")
                    .birthday(LocalDate.now())
                    .email("john.doe@example.com")
                    .passwordHash("lehash")
                    .build();
            personRepository.save(person);
            CV cv = CV.builder()
                    .person(person)
                    .build();
            cvRepository.save(cv);
            Activity activity = Activity.builder()
                    .cv(cv)
                    .year(2022)
                    .nature(Nature.PROJECT)
                    .title("Project Title")
                    .build();
            Activity savedActivity = activityRepository.save(activity);
        });
        assertDoesNotThrow(()->{
            Person person = Person.builder()
                    .name("Another John")
                    .firstName("Doe")
                    .birthday(LocalDate.now())
                    .email("anotherjohn.doe@example.com")
                    .passwordHash("lehash")
                    .build();
            personRepository.save(person);
            CV cv = CV.builder()
                    .person(person)
                    .build();
            cvRepository.save(cv);
            Activity activity = Activity.builder()
                    .cv(cv)
                    .nature(Nature.PROJECT)
                    .title("Project Title")
                    .build();
            Activity savedActivity = activityRepository.save(activity);
        });
    }

    @Test
    public void natureNullableTest(){
        assertDoesNotThrow(()->{
            Person person = Person.builder()
                    .name("John")
                    .firstName("Doe")
                    .birthday(LocalDate.now())
                    .email("john.doe@example.com")
                    .passwordHash("lehash")
                    .build();
            personRepository.save(person);
            CV cv = CV.builder()
                    .person(person)
                    .build();
            cvRepository.save(cv);
            Activity activity = Activity.builder()
                    .cv(cv)
                    .year(2022)
                    .nature(Nature.PROJECT)
                    .title("Project Title")
                    .build();
            Activity savedActivity = activityRepository.save(activity);
        });
        Exception e = assertThrows(DataIntegrityViolationException.class, ()->{
            Person person = Person.builder()
                    .name("Another-John")
                    .firstName("Doe")
                    .birthday(LocalDate.now())
                    .email("aotherjohn.doe@example.com")
                    .passwordHash("lehash")
                    .build();
            personRepository.save(person);
            CV cv = CV.builder()
                    .person(person)
                    .build();
            cvRepository.save(cv);
            Activity activity = Activity.builder()
                    .cv(cv)
                    .year(2022)
                    .title("Project Title")
                    .build();
            Activity savedActivity = activityRepository.save(activity);
        });
        assertTrue(e.getMessage().contains("NOT NULL check constraint") && e.getMessage().contains("ACTIVITY column: NATURE"));
    }

    @Test
    public void titleNullableTest(){
        assertDoesNotThrow(()->{
            Person person = Person.builder()
                    .name("John")
                    .firstName("Doe")
                    .birthday(LocalDate.now())
                    .email("john.doe@example.com")
                    .passwordHash("lehash")
                    .build();
            personRepository.save(person);
            CV cv = CV.builder()
                    .person(person)
                    .build();
            cvRepository.save(cv);
            Activity activity = Activity.builder()
                    .cv(cv)
                    .year(2022)
                    .nature(Nature.PROJECT)
                    .title("Project Title")
                    .build();
            Activity savedActivity = activityRepository.save(activity);
        });
        Exception e = assertThrows(DataIntegrityViolationException.class, ()->{
            Person person = Person.builder()
                    .name("Another-John")
                    .firstName("Doe")
                    .birthday(LocalDate.now())
                    .email("aotherjohn.doe@example.com")
                    .passwordHash("lehash")
                    .build();
            personRepository.save(person);
            CV cv = CV.builder()
                    .person(person)
                    .build();
            cvRepository.save(cv);
            Activity activity = Activity.builder()
                    .cv(cv)
                    .year(2022)
                    .nature(Nature.PROJECT)
                    .build();
            Activity savedActivity = activityRepository.save(activity);
        });
        assertTrue(e.getMessage().contains("NOT NULL check constraint") && e.getMessage().contains("ACTIVITY column: TITLE"));
    }

    @Test
    public void descriptionNullableTest(){
        assertDoesNotThrow(()->{
            Person person = Person.builder()
                    .name("John")
                    .firstName("Doe")
                    .birthday(LocalDate.now())
                    .email("john.doe@example.com")
                    .passwordHash("lehash")
                    .build();
            personRepository.save(person);
            CV cv = CV.builder()
                    .person(person)
                    .build();
            cvRepository.save(cv);
            Activity activity = Activity.builder()
                    .cv(cv)
                    .year(2022)
                    .nature(Nature.PROJECT)
                    .title("Project Title")
                    .build();
            Activity savedActivity = activityRepository.save(activity);
        });
        assertDoesNotThrow(()->{
            Person person = Person.builder()
                    .name("Another John")
                    .firstName("Doe")
                    .birthday(LocalDate.now())
                    .email("anotherjohn.doe@example.com")
                    .passwordHash("lehash")
                    .build();
            personRepository.save(person);
            CV cv = CV.builder()
                    .person(person)
                    .build();
            cvRepository.save(cv);
            Activity activity = Activity.builder()
                    .cv(cv)
                    .year(2022)
                    .nature(Nature.PROJECT)
                    .title("Project Title")
                    .description("Project Description")
                    .build();
            Activity savedActivity = activityRepository.save(activity);
        });
    }

    @Test
    public void webAddressNullableTest(){
        assertDoesNotThrow(()->{
            Person person = Person.builder()
                    .name("John")
                    .firstName("Doe")
                    .birthday(LocalDate.now())
                    .email("john.doe@example.com")
                    .passwordHash("lehash")
                    .build();
            personRepository.save(person);
            CV cv = CV.builder()
                    .person(person)
                    .build();
            cvRepository.save(cv);
            Activity activity = Activity.builder()
                    .cv(cv)
                    .year(2022)
                    .nature(Nature.PROJECT)
                    .title("Project Title")
                    .build();
            Activity savedActivity = activityRepository.save(activity);
        });
        assertDoesNotThrow(()->{
            Person person = Person.builder()
                    .name("Another John")
                    .firstName("Doe")
                    .birthday(LocalDate.now())
                    .email("anotherjohn.doe@example.com")
                    .passwordHash("lehash")
                    .build();
            personRepository.save(person);
            CV cv = CV.builder()
                    .person(person)
                    .build();
            cvRepository.save(cv);
            Activity activity = Activity.builder()
                    .cv(cv)
                    .year(2022)
                    .nature(Nature.PROJECT)
                    .title("Project Title")
                    .webAddress("https://www.example.com/activity")
                    .build();
            Activity savedActivity = activityRepository.save(activity);
        });
    }



}
