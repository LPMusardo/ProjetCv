package com.example.projetcv.model;

import com.example.projetcv.dao.CVRepository;
import com.example.projetcv.dao.PersonRepository;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.dao.DataIntegrityViolationException;
import java.time.LocalDate;
import java.util.Set;
import java.util.logging.Logger;

import static org.assertj.core.api.Assertions.assertThat;
import static org.junit.jupiter.api.Assertions.*;


@SpringBootTest
public class PersonTest {

    @BeforeEach
    public void cleanPersonTable(){
        personRepository.deleteAll();
    }

    @Autowired
    private PersonRepository personRepository;

    @Autowired
    private CVRepository cvRepository;

    Logger logger = Logger.getLogger(this.getClass().getName());

    //---------------------------------CONSTRAINTS TESTS---------------------------------

    @Test
    public void idAutoGeneratedTest(){
            Person person = Person.builder()
                    .name("John")
                    .firstName("Doe")
                    .email("john.doe@example.com")
                    .birthday(LocalDate.now())
                    .passwordHash("lehash")
                    .build();
            Person savedPerson = personRepository.save(person);
            assertThat(savedPerson.getId()).isNotNull();
    }

    @Test
    public void emailUniqueTest(){
        assertDoesNotThrow(()->{
            Person person = Person.builder()
                    .name("John")
                    .firstName("Doe")
                    .email("john.doe@example.com")
                    .birthday(LocalDate.now())
                    .passwordHash("lehash")
                    .build();
            personRepository.save(person);
        });
        Exception e = assertThrows(DataIntegrityViolationException.class, ()->{
            Person person = Person.builder()
                    .name("Max")
                    .firstName("Gui")
                    .email("john.doe@example.com")
                    .birthday(LocalDate.now())
                    .passwordHash("passhash")
                    .build();
            personRepository.save(person);
        });
        logger.info("e: " + e.getMessage());
        assertTrue(e.getMessage().contains("unique constraint") && e.getMessage().contains("PERSON"));
    }

    @Test
    public void nameNotNullableTest(){
        assertDoesNotThrow(()->{
            Person person = Person.builder()
                    .name("John")
                    .firstName("Doe")
                    .email("john.doe@example.com")
                    .birthday(LocalDate.now())
                    .passwordHash("lehash")
                    .build();
            personRepository.save(person);
        });
        Exception e = assertThrows(DataIntegrityViolationException.class, ()->{
            Person person = Person.builder()
                    .firstName("Doe")
                    .email("anotherjohn.doe@example.com")
                    .birthday(LocalDate.now())
                    .passwordHash("lehash")
                    .build();
            personRepository.save(person);
        });
        logger.info("e: " + e.getMessage());
        assertTrue(e.getMessage().contains("NOT NULL check constraint") && e.getMessage().contains("PERSON column: NAME"));
    }

    @Test
    public void firstNameNotNullableTest(){
        assertDoesNotThrow(()->{
            Person person = Person.builder()
                    .name("John")
                    .firstName("Doe")
                    .email("john.doe@example.com")
                    .birthday(LocalDate.now())
                    .passwordHash("lehash")
                    .build();
            personRepository.save(person);
        });
        Exception e = assertThrows(DataIntegrityViolationException.class, ()->{
            Person person = Person.builder()
                    .name("John")
                    .email("anotherjohn.doe@example.com")
                    .birthday(LocalDate.now())
                    .passwordHash("lehash")
                    .build();
            personRepository.save(person);
        });
        assertTrue(e.getMessage().contains("NOT NULL check constraint") && e.getMessage().contains("PERSON column: FIRST_NAME"));
    }

    @Test
    public void emailNotNullableTest(){
        assertDoesNotThrow(()->{
            Person person = Person.builder()
                    .name("John")
                    .firstName("Doe")
                    .email("john.doe@example.com")
                    .birthday(LocalDate.now())
                    .passwordHash("lehash")
                    .build();
            personRepository.save(person);
        });
        Exception e = assertThrows(DataIntegrityViolationException.class, ()->{
            Person person = Person.builder()
                    .name("John")
                    .firstName("Doe")
                    .birthday(LocalDate.now())
                    .passwordHash("lehash")
                    .build();
            personRepository.save(person);
        });
        assertTrue(e.getMessage().contains("NOT NULL check constraint") && e.getMessage().contains("PERSON column: EMAIL"));

    }


    @Test
    public void websiteNullableTest(){
        assertDoesNotThrow(()->{
            Person person = Person.builder()
                    .name("John")
                    .firstName("Doe")
                    .email("john.doe@example.com")
                    .birthday(LocalDate.now())
                    .passwordHash("lehash")
                    .website("https://www.example.com")
                    .build();
            personRepository.save(person);
        });
        assertDoesNotThrow( ()->{
            Person person = Person.builder()
                    .name("AnotherJohn")
                    .firstName("Doe")
                    .email("anotherjohn.doe@example.com")
                    .birthday(LocalDate.now())
                    .passwordHash("lehash")
                    .build();
            personRepository.save(person);
        });
    }


    @Test
    public void birthdayNotNullableTest(){
        assertDoesNotThrow(()->{
            Person person = Person.builder()
                    .name("John")
                    .firstName("Doe")
                    .email("john.doe@example.com")
                    .birthday(LocalDate.now())
                    .passwordHash("lehash")
                    .build();
            personRepository.save(person);
        });
        Exception e = assertThrows(DataIntegrityViolationException.class, ()->{
            Person person = Person.builder()
                    .name("John")
                    .firstName("Doe")
                    .email("anotherjohn.doe@example.com")
                    .passwordHash("lehash")
                    .build();
            personRepository.save(person);
        });
        assertTrue(e.getMessage().contains("NOT NULL check constraint") && e.getMessage().contains("PERSON column: BIRTHDAY"));
    }

    @Test
    public void passwordHashNotNullableTest(){
        assertDoesNotThrow(()->{
            Person person = Person.builder()
                    .name("John")
                    .firstName("Doe")
                    .email("john.doe@example.com")
                    .birthday(LocalDate.now())
                    .passwordHash("lehash")
                    .build();
            personRepository.save(person);
        });
        Exception e = assertThrows(DataIntegrityViolationException.class, ()->{
            Person person = Person.builder()
                    .name("John")
                    .firstName("Doe")
                    .email("john.doe@example.com")
                    .birthday(LocalDate.now())
                    .build();
            personRepository.save(person);
        });
        assertTrue(e.getMessage().contains("NOT NULL check constraint") && e.getMessage().contains("PERSON column: PASSWORD_HASH"));
    }


    @Test
    public void cvNullableTest() {
        assertDoesNotThrow(()->{
            Person person = Person.builder()
                    .name("John")
                    .firstName("Doe")
                    .email("john.doe@example.com")
                    .birthday(LocalDate.now())
                    .passwordHash("lehash")
                    .build();
            personRepository.save(person);
        });
        assertDoesNotThrow( ()->{
            Person person = Person.builder()
                    .name("AnotherJohn")
                    .firstName("Doe")
                    .email("anotherjohn.doe@example.com")
                    .birthday(LocalDate.now())
                    .passwordHash("lehash")
                    .build();
            Person savedPerson = personRepository.save(person);
            CV cv = CV.builder()
                    .person(person) // Ajoute un CV Ã  la personne
                    .build();
            cvRepository.save(cv);
        });
    }

    @Test
    public void rolesCanBeEmptyTest() {
        assertDoesNotThrow(()->{
            Person person = Person.builder()
                    .name("John")
                    .firstName("Doe")
                    .email("john.doe@example.com")
                    .birthday(LocalDate.now())
                    .passwordHash("lehash")
                    .build();
            personRepository.save(person);
        });
        assertDoesNotThrow( ()->{
            Person person = Person.builder()
                    .name("AnotherJohn")
                    .firstName("Doe")
                    .email("anotherjohn.doe@example.com")
                    .birthday(LocalDate.now())
                    .passwordHash("lehash")
                    .roles(Set.of("USER"))
                    .build();
            Person savedPerson = personRepository.save(person);
        });
    }





}
